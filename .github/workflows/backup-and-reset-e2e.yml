name: Backup and Reset to E2E Workflow

on:
  schedule:
    - cron: '45 4 * * *'  # every day at 4:45 AM UTC (15 minutes before E2E test)
  workflow_dispatch:
    inputs:
      backup_branch_name:
        description: 'Name of the backup branch (optional)'
        required: false
        type: string

env:
  AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
  AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
  AZURE_PRIVATE_KEY_BASE64: ${{ secrets.AZURE_PRIVATE_KEY_BASE64 }}
  AZURE_PFX_PASSWORD: ${{ secrets.AZURE_PFX_PASSWORD }}
  AZURE_THUMBPRINT: ${{ secrets.AZURE_THUMBPRINT }}

jobs:
  backup-and-reset-e2e:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
          token: ${{ secrets.WORKFLOW_PAT }}

      - name: Set up Git
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'github-actions@github.com'

      - name: Set up dependencies
        run: |
          cd .github/actions/sta-mountpoint
          npm install
          cd ../sta-azure-helper
          npm install
          cd ../sta-sp-move-to-backup
          npm install

      - name: Create Azure Access Token
        uses: ./.github/actions/sta-azure-helper
        id: azure-auth
        with:
          tenant_id: ${{ env.AZURE_TENANT_ID }}
          client_id: ${{ env.AZURE_CLIENT_ID }}
          key: ${{ env.AZURE_PRIVATE_KEY_BASE64 }}
          password: ${{ env.AZURE_PFX_PASSWORD }}
          thumbprint: ${{ env.AZURE_THUMBPRINT }}
          duration: 3600

      - name: Extract root mountpoint from fstab.yaml
        id: extract_mountpoint
        run: |
          root_mountpoint=$(grep -A 1 "mountpoints:" fstab.yaml | grep "^  /:" | sed 's/^  \/: //')
          echo "root_mountpoint=$root_mountpoint" >> $GITHUB_OUTPUT
          echo "Extracted root mountpoint: $root_mountpoint"

      - name: Parse mountpoint
        id: mountpoint_data
        uses: ./.github/actions/sta-mountpoint
        with:
          mountpoint: ${{ steps.extract_mountpoint.outputs.root_mountpoint }}
          mountpoint_type: 'sharepoint'

      - name: Create backup branch
        id: backup
        run: |
          # Get current date and time in YYYY-MM-DD-HH-MM format
          TIMESTAMP=$(date +%Y-%m-%d-%H-%M)
          # Use provided branch name or default to backup-{timestamp}
          BRANCH_NAME="${INPUT_BACKUP_BRANCH_NAME:-backup-$TIMESTAMP}"
          # Create and push the backup branch
          git checkout -b $BRANCH_NAME
          git push origin $BRANCH_NAME
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Reset main to specified commit
        run: |
          git checkout main
          git reset --hard ${{ secrets.E2E_WORKFLOW_COMMIT }}
          git push origin main --force

      - name: Get latest E2E issue
        id: get_issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
              per_page: 100,
              sort: 'created',
              direction: 'desc'
            });
            
            // Find the most recent issue containing 'Catalyze' in the body
            const catalyzeIssue = issues.data.find(issue => 
              issue.body && issue.body.toLowerCase().includes('catalyze')
            );
            
            if (catalyzeIssue) {
              const comment = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: catalyzeIssue.number
              });
              
              const threadComment = comment.data.find(c => c.body.includes('Slack thread_ts:'));
              if (threadComment) {
                const threadTs = threadComment.body.match(/Slack thread_ts: (.*)/)[1];
                core.setOutput('thread_ts', threadTs);
              }
            }

      - name: Move SharePoint content to backup folder
        id: move-to-backup
        uses: ./.github/actions/sta-sp-move-to-backup
        with:
          token: ${{ steps.azure-auth.outputs.access_token }}
          host: ${{ fromJSON(steps.mountpoint_data.outputs.data).host }}
          site_path: ${{ fromJSON(steps.mountpoint_data.outputs.data).site }}
          folder_path: ${{ fromJSON(steps.mountpoint_data.outputs.data).path }}

      - name: Create AEMY Installation issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.WORKFLOW_PAT }}
          script: |
            const { data: issue } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'AEMY Installation',
              body: 'Setup the workflows',
              labels: ['aemy-go', 'aemy-help', 'aemy-merge']
            });
            console.log(`Created issue #${issue.number}: ${issue.html_url}`);

      - name: Post Slack notification
        uses: slackapi/slack-github-action@v1.25.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          payload: |
            {
              "text": "*Backup and Reset Completed* :white_check_mark:\n• Created backup branch: `${{ steps.backup.outputs.branch_name }}`\n• Reset main branch to commit: `${{ secrets.E2E_WORKFLOW_COMMIT }}`",
              "thread_ts": "${{ steps.get_issue.outputs.thread_ts }}"
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }} 